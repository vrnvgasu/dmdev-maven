<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!--в project можно писать только теги, которые описаны в его xsd схемах-->
  <!--пример: http://maven.apache.org/xsd/maven-4.0.0.xsd - ссылка на схему-->

  <modelVersion>4.0.0</modelVersion> <!--модель pom. Давно не меняется-->

  <!--уникальный идентификатор проекта из трех ключей-->
  <groupId>ru.edu</groupId>
  <artifactId>first-maven</artifactId>
  <version>1.0.0.-SNAPSHOT</version>
  <modules>
    <module>database</module>
    <module>service</module>
    <module>web</module>
  </modules>

  <packaging>pom</packaging>

  <!--участок с метаинформацией: название, ссылка, контрибьютеры, лицензия и тд-->
  <name>first-maven</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <!--глобальные переменные. Можем ссылаться на них-->
  <!-- project.* -->
  <!-- settings.* - настройки MAVEN в .m2/repository-->
  <!-- env.* - переменные окружения. К примеру: env.JAVA_HOME -->
  <!-- System.getProperty | Передаем в программу через флаг -D -->
  <!-- собственные переменные. К примеру: ${spring.version} -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <!--Добавляем свои свойства-->
    <spring.version>5.0.5.RELEASE</spring.version>
  </properties>

  <!--По умолчанию модули не наследуют зависимости из dependencyManagement-->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.modelmapper</groupId>
        <artifactId>modelmapper</artifactId>
        <version>3.1.0</version>
      </dependency>

      <!--Нужен только для модуля web-->
      <dependency>
        <groupId>jakarta.servlet</groupId>
        <artifactId>jakarta.servlet-api</artifactId>
        <version>5.0.0</version>
        <scope>provided</scope>
      </dependency>

      <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>42.5.3</version>
        <scope>runtime</scope>
        <optional>true</optional>
      </dependency>

      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>${spring.version}</version>
        <exclusions>
          <exclusion>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aop</artifactId>
        <version>${spring.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!--BUILD SETTINGS-->
  <build>

    <!--Конфигурируем работу с ресурсами-->
    <resources>
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
        <!--true - подставлять выражения ${*} в файлы ресурсов}-->
        <filtering>true</filtering>
      </resource>
    </resources>

    <!--Меняет название архива-->
    <!--Не будем указывать, т.к. тогда в модулях все будет называться также ROOT-->
<!--    <finalName>ROOT</finalName>-->

    <!--Работает, как dependencyManagement, дочерние модули их не видят
    пока в них явно не укажем эти плагины-->
    <pluginManagement>
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->

        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.3.0</version>
          <!--Указываем голы для выполнения в этом плагине-->
          <executions>
            <execution>
              <id>copy-my-docker-files</id>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <!--Привязываем голы выше к фазе-->
              <phase>validate</phase>
              <!--Конфигурируем свойства класса CopyResourcesMojo-->
              <configuration>
                <!--${project.basedir} - зарезервированная переменная. Корень пути проекта-->
                <outputDirectory>${project.basedir}/target</outputDirectory>
                <resources>
                  <resource>
                    <directory>${project.basedir}/docker</directory>
                  </resource>
                </resources>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.12.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.3.1</version>
        </plugin>

        <!--/////////////////////////////-->
        <!--Для отчетов по тестам-->
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>0.8.8</version>
          <executions>
            <execution>
              <id>prepare-agent</id>
              <goals>
                <!--Для подготовки к формированию отчета-->
                <!--prepare-agent уже привязан к фазе prepare-agent.
                Дополнительно указывать фазу уже не надо -->
                <goal>prepare-agent</goal>
              </goals>
            </execution>
            <execution>
              <id>generate-jacoco-report</id>
              <goals>
                <goal>report</goal>
              </goals>
              <!--рекомендовано привязывать <goal>report к фазе prepare-package-->
              <phase>prepare-package</phase>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>3.0.1</version>
        </plugin>
        <!--Изменяем параметры плагина из Super POM-->
        <plugin>
          <!--Интеграционные тесты-->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>3.0.0-M9</version>
          <executions>
            <execution>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <!--другая версия-->
          <version>3.10.1</version>
          <configuration>
            <!--Параметры в конфигурации берем из свойств
            класса этого плагина CompilerMojo и его предка AbstractCompilerMojo-->
            <!--и эти параметры - сеттеры для объектов классов плагинов-->
            <source>17</source><!--Версия исходников java17-->
            <target>17</target><!--Версия компиляции  java17-->
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <!--другая версия-->
          <version>2.22.2</version>
          <configuration>
            <!--Параметры в конфигурации берем из свойств
            класса этого плагина SurefirePlugin и его предка AbstractCompilerMojo-->
            <!--и эти параметры - сеттеры для объектов классов плагинов-->
            <!--          <skip>true</skip> &lt;!&ndash;Пропустить тесты&ndash;&gt;-->
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <distributionManagement>
    <snapshotRepository>
      <id>my-nexus</id>
      <url>http://localhost:9001/repository/maven-snapshots/</url>
    </snapshotRepository>
    <repository>
      <id>my-nexus</id>
      <url>http://localhost:9001/repository/maven-releases/</url>
    </repository>
  </distributionManagement>
</project>
